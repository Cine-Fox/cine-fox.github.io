import{_ as a,c as e,o as i,a1 as s,af as t,ag as l}from"./chunks/framework.vateGHBz.js";const m=JSON.parse('{"title":"StarlightEye","description":"","frontmatter":{},"headers":[],"relativePath":"starlighteye.md","filePath":"starlighteye.md","lastUpdated":1719825753000}'),r={name:"starlighteye.md"},h=s('<h1 id="starlighteye" tabindex="-1">StarlightEye <a class="header-anchor" href="#starlighteye" aria-label="Permalink to &quot;StarlightEye&quot;">â€‹</a></h1><p>OpenSource IMX585 Camera Board for Raspberry Pi</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">â€‹</a></h2><p><img src="'+t+'" alt="Pic"></p><p><a href="https://github.com/will127534/StarlightEye" target="_blank" rel="noreferrer">StarlightEye</a> is an OpenSource IMX585 Camera Board, which is made by <a href="https://github.com/will127534" target="_blank" rel="noreferrer">Will Whang</a>. The following introductions are all from Will&#39;s projectðŸ‘‡</p><blockquote><p>Welcome to the StarlightEye project, an open-source camera board designed for Raspberry Pi Compute Module 4 boards using the IMX585. This project aims to provide a high-quality, affordable, and accessible camera module for advanced Raspberry Pi projects. The board is designed using KiCad v6, a popular open-source electronics design automation (EDA) software.</p><p>StarlightEye captures stunning high-resolution images and videos with improved low-light performance and dynamic range. It&#39;s perfect for photography enthusiasts, developers, and makers who want to level up their Raspberry Pi projects with a powerful camera.</p></blockquote><h2 id="where-can-i-get-it" tabindex="-1">Where can I get it? <a class="header-anchor" href="#where-can-i-get-it" aria-label="Permalink to &quot;Where can I get it?&quot;">â€‹</a></h2><p>This is probably the most important issue for you. Will Whang may occasionally create multiple StarlightEyes, but he recommends that users make their own with PCB Plant like JLCPCB and so on, because the key production files are already very complete.</p><p><img src="'+l+`" alt="pcb"></p><blockquote><p><em>This is the preview image when I commissioned JLCPCB to make it. ðŸ‘†</em></p></blockquote><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">â€‹</a></h2><h3 id="step-1-modify-dtoverlay" tabindex="-1">Step 1: Modify dtoverlay <a class="header-anchor" href="#step-1-modify-dtoverlay" aria-label="Permalink to &quot;Step 1: Modify dtoverlay&quot;">â€‹</a></h3><p>you will need to modify the <code>config.txt</code> found in the boot partition after you are flashing your <a href="/software.html#install-cine-fox">cinepi-sdk</a>.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># StarlightEye Module ( default camera port 1 )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">camera_auto_detect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dtoverlay</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">imx585</span></span></code></pre></div><h3 id="step-2-recompile-driver" tabindex="-1">Step 2: Recompile driver <a class="header-anchor" href="#step-2-recompile-driver" aria-label="Permalink to &quot;Step 2: Recompile driver&quot;">â€‹</a></h3><p>Initially, the default imx585 driver of current pre-release <strong>cinepi-sdk</strong> is not made for StarlightEye, so the i2c address needs to be changed and recompiled.</p><p>You can use the following two ways to complete it ðŸ‘‡</p><hr><h4 id="use-git-pull" tabindex="-1">Use git pull <a class="header-anchor" href="#use-git-pull" aria-label="Permalink to &quot;Use git pull&quot;">â€‹</a></h4><p>you can run this command</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/driver/imx585-v4l2-driver/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./setup.sh</span></span></code></pre></div><p>Done!</p><hr><h4 id="modify-manually" tabindex="-1">Modify manually <a class="header-anchor" href="#modify-manually" aria-label="Permalink to &quot;Modify manually&quot;">â€‹</a></h4><p>if you can not use git, you can do it manually</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/driver/imx585-v4l2-driver/</span></span></code></pre></div><p>modify the overlay</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cam_node:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> imx585@37</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                reg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0x3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">7&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>To</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cam_node:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> imx585@37</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                reg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0x1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>then run <code>./setup.sh</code></p><p>Done!</p><h2 id="wiki" tabindex="-1">Wiki <a class="header-anchor" href="#wiki" aria-label="Permalink to &quot;Wiki&quot;">â€‹</a></h2><p><a href="https://github.com/will127534/StarlightEye/wiki" target="_blank" rel="noreferrer">Here</a> is the wiki made by Will</p>`,34),n=[h];function p(o,d,c,k,g,u){return i(),e("div",null,n)}const b=a(r,[["render",p]]);export{m as __pageData,b as default};
